{"log_best_programs": true, "num_literals": 0, "total_programs": 10, "total_rules": 0, "total_ground_rules": 0, "durations": {"generate": [0.0004537079999984428, 0.00036162500000003206, 0.0004111250000011779, 0.0003909589999988583, 0.0004915830000005172, 0.0003652079999998392, 0.0003628750000004288, 0.00041537500000110583, 0.0003939580000000831, 0.0003999589999992281], "test": [0.09836841699999965, 0.10292854199999901, 0.040282666999999606, 0.31190233299999903, 0.30647875000000013, 0.09547662499999987, 0.041721290999999994, 0.03244362499999909, 0.032416040999999396, 1.399407], "combine": [6.670000001207654e-07, 0.10296424999999942, 4.580000005915963e-07, 0.17347058400000037, 8.749999995671942e-07, 0.17882270800000022, 5.000000005139782e-07, 5.830000002760016e-07, 5.000000005139782e-07], "constrain": [0.001309792000000698, 0.0013189579999988155, 0.0015863340000006332, 0.00018437499999990337, 0.0014530420000014033, 0.0002009590000007222, 0.001665958000000245, 0.00030887499999998624, 0.0002399170000000339], "find_bindings_prolog": [0.10218416700000077, 0.03981954200000004, 0.31119841599999987, 0.3057253329999998, 0.0947570829999993, 0.041249708000000496, 0.03195420800000015, 0.03192020900000081, 1.3953475839999996]}, "final_exec_time": 15.459622374999999, "stages": [], "best_programs": [], "solution": {"code": "magic_value(A):- last(A,aj),head(A,aj),magic(aj).\nmagic_value(A):- last(A,ft),head(A,ft),magic(ft).\nmagic_value(A):- head(A,bi),last(A,bi),magic(bi).\nmagic_value(A):- last(A,cr),head(A,cr),magic(cr).\nmagic_value(A):- head(A,c7),magic(c7).\nmagic_value(A):- head(A,ci),last(A,ci),magic(ci).\nmagic_value(A):- last(A,fm),head(A,fm),magic(fm).\nmagic_value(A):- head(A,cv),last(A,cv),magic(cv).\nmagic_value(A):- last(A,gf),head(A,gf),magic(gf).\nmagic_value(A):- head(A,ew),last(A,ew),magic(ew).\nmagic_value(A):- head(A,dq),last(A,dq),magic(dq).\nmagic_value(A):- last(A,bc),head(A,bc),magic(bc).\nmagic_value(A):- last(A,ge),head(A,ge),magic(ge).\nmagic_value(A):- head(A,bo),last(A,bo),magic(bo).\nmagic_value(A):- head(A,ba),last(A,ba),magic(ba).\nmagic_value(A):- head(A,er),last(A,er),magic(er).\nmagic_value(A):- last(A,et),head(A,et),magic(et).\nmagic_value(A):- head(A,ds),last(A,ds),magic(ds).\nmagic_value(A):- last(A,fi),head(A,fi),magic(fi).\nmagic_value(A):- head(A,cz),last(A,cz),magic(cz).\nmagic_value(A):- head(A,ek),last(A,ek),magic(ek).\nmagic_value(A):- head(A,ea),last(A,ea),magic(ea).\nmagic_value(A):- head(A,z),last(A,z),magic(z).\nmagic_value(A):- last(A,fh),head(A,fh),magic(fh).\nmagic_value(A):- last(A,bu),head(A,bu),magic(bu).\nmagic_value(A):- head(A,ap),last(A,ap),magic(ap).\nmagic_value(A):- head(A,ca),last(A,ca),magic(ca).\nmagic_value(A):- last(A,cp),head(A,cp),magic(cp).\nmagic_value(A):- head(A,az),last(A,az),magic(az).\nmagic_value(A):- last(A,c7),magic(c7).\nmagic_value(A):- last(A,dz),head(A,dz),magic(dz).\nmagic_value(A):- tail(A,C),head(C,c7),magic(c7).\nmagic_value(A):- head(A,ee),last(A,ee),magic(ee).\nmagic_value(A):- last(A,dx),head(A,dx),magic(dx).\nmagic_value(A):- head(A,eb),last(A,eb),magic(eb).", "is_solution": true, "conf_matrix": [0, 0, 0, 0], "total_exec_time": 15.459597209, "durations": [{"operation": "Test", "called": 10, "total": 2.461425290999996, "mean": 0.2461425290999996, "maximum": 1.399407, "__type__": "DurationSummary"}, {"operation": "Find_Bindings_Prolog", "called": 9, "total": 2.354156250000001, "mean": 0.26157291666666677, "maximum": 1.3953475839999996, "__type__": "DurationSummary"}, {"operation": "Combine", "called": 9, "total": 0.4552611250000016, "mean": 0.05058456944444462, "maximum": 0.17882270800000022, "__type__": "DurationSummary"}, {"operation": "Constrain", "called": 9, "total": 0.00826821000000244, "mean": 0.0009186900000002712, "maximum": 0.001665958000000245, "__type__": "DurationSummary"}, {"operation": "Generate", "called": 10, "total": 0.004046374999999713, "mean": 0.00040463749999997134, "maximum": 0.0004915830000005172, "__type__": "DurationSummary"}], "__type__": "ProgramStats"}, "is_solution": true, "stats_file": "./results/list_example/magicpopper_types/8000/2/stats.json", "end": false, "__type__": "Stats"}