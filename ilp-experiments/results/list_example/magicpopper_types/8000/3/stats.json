{"log_best_programs": true, "num_literals": 0, "total_programs": 12, "total_rules": 0, "total_ground_rules": 0, "durations": {"generate": [0.0005082919999992441, 0.0003686670000000447, 0.0004030000000003753, 0.0003929580000008315, 0.0004927079999994532, 0.0003352920000008197, 0.00036020900000011125, 0.0004438750000002045, 0.000374125000000447, 0.0003961249999999694, 0.0004372079999992451, 0.00040420800000084967], "test": [0.10065012499999959, 0.09831983400000155, 0.041311125000000004, 0.3080964159999997, 0.30763920799999944, 0.09310050000000025, 0.040812499999999474, 0.03284287500000005, 0.032470915999999406, 0.06204541600000013, 0.06300983300000063, 1.4468503749999986], "combine": [7.090000000431473e-07, 0.10534754100000043, 5.410000003536197e-07, 0.1747202080000001, 6.250000001983835e-07, 0.17832074999999925, 5.420000004363601e-07, 5.000000005139782e-07, 5.410000003536197e-07, 5.000000005139782e-07, 5.000000005139782e-07], "constrain": [0.0013121250000001083, 0.0012887500000005048, 0.00154299999999985, 0.00018137499999859585, 0.001346999999999099, 0.00019616700000035792, 0.0018062079999996428, 0.00029274999999984175, 0.0002515409999990226, 0.00024166600000086191, 0.00023829200000058393], "find_bindings_prolog": [0.09766391699999843, 0.04085791599999844, 0.3074200410000003, 0.3069426659999994, 0.09243458399999938, 0.040325333000000185, 0.032344791999999956, 0.03198924999999875, 0.061560209000001365, 0.06253845800000057, 1.4424632920000011]}, "final_exec_time": 15.393669333, "stages": [], "best_programs": [], "solution": {"code": "magic_value(A):- last(A,bg),head(A,bg),magic(bg).\nmagic_value(A):- last(A,bq),head(A,bq),magic(bq).\nmagic_value(A):- last(A,u),head(A,u),magic(u).\nmagic_value(A):- head(A,bx),last(A,bx),magic(bx).\nmagic_value(A):- head(A,ak),last(A,ak),magic(ak).\nmagic_value(A):- head(A,c7),magic(c7).\nmagic_value(A):- last(A,cm),head(A,cm),magic(cm).\nmagic_value(A):- head(A,ax),last(A,ax),magic(ax).\nmagic_value(A):- head(A,fj),last(A,fj),magic(fj).\nmagic_value(A):- last(A,et),head(A,et),magic(et).\nmagic_value(A):- last(A,y),head(A,y),magic(y).\nmagic_value(A):- last(A,s),head(A,s),magic(s).\nmagic_value(A):- head(A,i),last(A,i),magic(i).\nmagic_value(A):- head(A,ac),last(A,ac),magic(ac).\nmagic_value(A):- last(A,fy),head(A,fy),magic(fy).\nmagic_value(A):- head(A,r),last(A,r),magic(r).\nmagic_value(A):- last(A,cv),head(A,cv),magic(cv).\nmagic_value(A):- head(A,fx),last(A,fx),magic(fx).\nmagic_value(A):- last(A,ee),head(A,ee),magic(ee).\nmagic_value(A):- last(A,a),head(A,a),magic(a).\nmagic_value(A):- head(A,ea),last(A,ea),magic(ea).\nmagic_value(A):- last(A,c7),magic(c7).\nmagic_value(A):- tail(A,C),head(C,c7),magic(c7).\nmagic_value(A):- last(A,fu),head(A,fu),magic(fu).\nmagic_value(A):- last(A,du),head(A,du),magic(du).\nmagic_value(A):- head(A,bn),last(A,bn),magic(bn).\nmagic_value(A):- last(A,aw),head(A,aw),magic(aw).\nmagic_value(A):- last(A,aq),head(A,aq),magic(aq).\nmagic_value(A):- head(A,bl),last(A,bl),magic(bl).\nmagic_value(A):- head(A,bh),last(A,bh),magic(bh).\nmagic_value(A):- head(A,bv),last(A,bv),magic(bv).\nmagic_value(A):- head(A,dm),last(A,dm),magic(dm).\nmagic_value(A):- head(A,bo),last(A,bo),magic(bo).", "is_solution": true, "conf_matrix": [0, 0, 0, 0], "total_exec_time": 15.393643542, "durations": [{"operation": "Test", "called": 12, "total": 2.627149122999999, "mean": 0.21892909358333323, "maximum": 1.4468503749999986, "__type__": "DurationSummary"}, {"operation": "Find_Bindings_Prolog", "called": 11, "total": 2.516540457999998, "mean": 0.22877640527272708, "maximum": 1.4424632920000011, "__type__": "DurationSummary"}, {"operation": "Combine", "called": 11, "total": 0.4583929570000027, "mean": 0.041672087000000246, "maximum": 0.17832074999999925, "__type__": "DurationSummary"}, {"operation": "Constrain", "called": 11, "total": 0.008698873999998469, "mean": 0.0007908067272725881, "maximum": 0.0018062079999996428, "__type__": "DurationSummary"}, {"operation": "Generate", "called": 12, "total": 0.0049166670000015955, "mean": 0.00040972225000013296, "maximum": 0.0005082919999992441, "__type__": "DurationSummary"}], "__type__": "ProgramStats"}, "is_solution": true, "stats_file": "./results/list_example/magicpopper_types/8000/3/stats.json", "end": false, "__type__": "Stats"}