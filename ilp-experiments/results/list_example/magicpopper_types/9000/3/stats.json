{"log_best_programs": true, "num_literals": 0, "total_programs": 12, "total_rules": 0, "total_ground_rules": 0, "durations": {"generate": [0.0005179169999998123, 0.00040699999999915804, 0.00041195799999904636, 0.000423415999998511, 0.000538708000000554, 0.0003643750000001944, 0.0004955419999994604, 0.0004502920000000188, 0.0004229580000014721, 0.00042449999999760735, 0.0004766250000010075, 0.00047866600000290305], "test": [0.1354539999999993, 0.11790729199999994, 0.05098350000000096, 0.3443146249999991, 0.3325028749999994, 0.11146787499999888, 0.049354708999999275, 0.03930395799999786, 0.03958595799999998, 0.07336633399999926, 0.07370095799999987, 0.32947458399999974], "combine": [7.499999998827889e-07, 0.1243366659999996, 5.410000003536197e-07, 0.21031470900000215, 7.500000016591457e-07, 0.21187704200000113, 5.419999986600033e-07, 5.830000020523585e-07, 5.419999986600033e-07, 5.419999986600033e-07, 5.830000020523585e-07], "constrain": [0.0014663749999996867, 0.0013214589999996917, 0.0017085420000011453, 0.00019762499999842476, 0.0014447920000009162, 0.00021541599999963523, 0.0018095420000001639, 0.0003432079999967641, 0.00026070900000263464, 0.00026400000000137425, 0.0002761659999990229], "find_bindings_prolog": [0.11713612500000004, 0.05047633300000065, 0.3435780830000006, 0.3317123749999986, 0.11066829199999972, 0.04880262499999688, 0.038735417000001604, 0.039004750000000143, 0.07281816600000113, 0.0731015420000034, 0.32530491699999686]}, "final_exec_time": 18.211898459, "stages": [], "best_programs": [], "solution": {"code": "magic_value(A):- last(A,cw),head(A,cw),magic(cw).\nmagic_value(A):- last(A,bo),head(A,bo),magic(bo).\nmagic_value(A):- head(A,l),last(A,l),magic(l).\nmagic_value(A):- head(A,en),last(A,en),magic(en).\nmagic_value(A):- head(A,eb),last(A,eb),magic(eb).\nmagic_value(A):- last(A,eq),head(A,eq),magic(eq).\nmagic_value(A):- head(A,ft),last(A,ft),magic(ft).\nmagic_value(A):- last(A,dz),head(A,dz),magic(dz).\nmagic_value(A):- head(A,fl),last(A,fl),magic(fl).\nmagic_value(A):- head(A,c7),magic(c7).\nmagic_value(A):- head(A,gg),last(A,gg),magic(gg).\nmagic_value(A):- head(A,u),last(A,u),magic(u).\nmagic_value(A):- last(A,cr),head(A,cr),magic(cr).\nmagic_value(A):- head(A,z),last(A,z),magic(z).\nmagic_value(A):- head(A,bc),last(A,bc),magic(bc).\nmagic_value(A):- head(A,ai),last(A,ai),magic(ai).\nmagic_value(A):- head(A,bm),last(A,bm),magic(bm).\nmagic_value(A):- head(A,es),last(A,es),magic(es).\nmagic_value(A):- last(A,dl),head(A,dl),magic(dl).\nmagic_value(A):- last(A,c7),magic(c7).\nmagic_value(A):- head(A,gf),last(A,gf),magic(gf).\nmagic_value(A):- last(A,fg),head(A,fg),magic(fg).\nmagic_value(A):- last(A,bn),head(A,bn),magic(bn).\nmagic_value(A):- last(A,ez),head(A,ez),magic(ez).\nmagic_value(A):- head(A,p),last(A,p),magic(p).\nmagic_value(A):- head(A,ct),last(A,ct),magic(ct).\nmagic_value(A):- head(A,cu),last(A,cu),magic(cu).\nmagic_value(A):- head(A,x),last(A,x),magic(x).\nmagic_value(A):- head(A,am),last(A,am),magic(am).\nmagic_value(A):- last(A,ek),head(A,ek),magic(ek).\nmagic_value(A):- tail(A,C),head(C,c7),magic(c7).\nmagic_value(A):- head(A,fx),last(A,fx),magic(fx).", "is_solution": true, "conf_matrix": [0, 0, 0, 0], "total_exec_time": 18.21187225, "durations": [{"operation": "Test", "called": 12, "total": 1.6974166679999936, "mean": 0.14145138899999946, "maximum": 0.3443146249999991, "__type__": "DurationSummary"}, {"operation": "Find_Bindings_Prolog", "called": 11, "total": 1.5513386249999996, "mean": 0.14103078409090905, "maximum": 0.3435780830000006, "__type__": "DurationSummary"}, {"operation": "Combine", "called": 11, "total": 0.5465332500000049, "mean": 0.04968484090909135, "maximum": 0.21187704200000113, "__type__": "DurationSummary"}, {"operation": "Constrain", "called": 11, "total": 0.00930783399999946, "mean": 0.0008461667272726781, "maximum": 0.0018095420000001639, "__type__": "DurationSummary"}, {"operation": "Generate", "called": 12, "total": 0.005411956999999745, "mean": 0.0004509964166666454, "maximum": 0.000538708000000554, "__type__": "DurationSummary"}], "__type__": "ProgramStats"}, "is_solution": true, "stats_file": "./results/list_example/magicpopper_types/9000/3/stats.json", "end": false, "__type__": "Stats"}