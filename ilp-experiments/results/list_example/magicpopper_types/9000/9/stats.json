{"log_best_programs": true, "num_literals": 0, "total_programs": 12, "total_rules": 0, "total_ground_rules": 0, "durations": {"generate": [0.0004999999999988347, 0.0003943749999990587, 0.0004353330000004263, 0.00041774999999866225, 0.000534833999999762, 0.0003936670000008746, 0.00042908400000030156, 0.00043454099999884477, 0.0004066250000001048, 0.00039300000000075386, 0.0004674999999991769, 0.00046708400000028405], "test": [0.12401770900000031, 0.10873524999999873, 0.04539316700000029, 0.30619058299999935, 0.31050720899999895, 0.10778770800000004, 0.04751770800000088, 0.03583945799999988, 0.03520766699999989, 0.06899758399999989, 0.06995037500000123, 1.6121705000000013], "combine": [8.329999996448123e-07, 0.1296907919999999, 5.420000004363601e-07, 0.2153723749999994, 8.749999995671942e-07, 0.22569283400000018, 5.410000003536197e-07, 5.419999986600033e-07, 4.169999989755979e-07, 5.000000005139782e-07, 5.000000005139782e-07], "constrain": [0.001387082999999123, 0.0013901249999985765, 0.0016746249999997076, 0.00019337499999849683, 0.001554999999999751, 0.0002318749999989933, 0.001770916999999983, 0.0003235830000001272, 0.00024741700000063815, 0.00025716599999903167, 0.0002624999999998323], "find_bindings_prolog": [0.10794904200000133, 0.04487420799999953, 0.30543287500000105, 0.30967358400000045, 0.1069320420000004, 0.04695041699999969, 0.0352959170000009, 0.034653792000000294, 0.06847150000000113, 0.06940779200000158, 1.6075979159999978]}, "final_exec_time": 17.569126167, "stages": [], "best_programs": [], "solution": {"code": "magic_value(A):- head(A,b),last(A,b),magic(b).\nmagic_value(A):- last(A,dg),head(A,dg),magic(dg).\nmagic_value(A):- last(A,dy),head(A,dy),magic(dy).\nmagic_value(A):- head(A,da),last(A,da),magic(da).\nmagic_value(A):- tail(A,C),head(C,c7),magic(c7).\nmagic_value(A):- last(A,bz),head(A,bz),magic(bz).\nmagic_value(A):- last(A,au),head(A,au),magic(au).\nmagic_value(A):- head(A,eh),last(A,eh),magic(eh).\nmagic_value(A):- last(A,am),head(A,am),magic(am).\nmagic_value(A):- head(A,du),last(A,du),magic(du).\nmagic_value(A):- head(A,d),last(A,d),magic(d).\nmagic_value(A):- head(A,be),last(A,be),magic(be).\nmagic_value(A):- last(A,c7),magic(c7).\nmagic_value(A):- last(A,cn),head(A,cn),magic(cn).\nmagic_value(A):- last(A,dx),head(A,dx),magic(dx).\nmagic_value(A):- head(A,c7),magic(c7).\nmagic_value(A):- head(A,ek),last(A,ek),magic(ek).\nmagic_value(A):- head(A,ew),last(A,ew),magic(ew).\nmagic_value(A):- head(A,cg),last(A,cg),magic(cg).\nmagic_value(A):- head(A,u),last(A,u),magic(u).\nmagic_value(A):- head(A,cb),last(A,cb),magic(cb).\nmagic_value(A):- head(A,dk),last(A,dk),magic(dk).\nmagic_value(A):- last(A,fa),head(A,fa),magic(fa).\nmagic_value(A):- head(A,ag),last(A,ag),magic(ag).\nmagic_value(A):- head(A,dn),last(A,dn),magic(dn).\nmagic_value(A):- head(A,z),last(A,z),magic(z).\nmagic_value(A):- last(A,ej),head(A,ej),magic(ej).\nmagic_value(A):- head(A,bc),last(A,bc),magic(bc).\nmagic_value(A):- head(A,cp),last(A,cp),magic(cp).\nmagic_value(A):- last(A,ah),head(A,ah),magic(ah).\nmagic_value(A):- head(A,em),last(A,em),magic(em).\nmagic_value(A):- head(A,v),last(A,v),magic(v).\nmagic_value(A):- last(A,cl),head(A,cl),magic(cl).\nmagic_value(A):- head(A,ae),last(A,ae),magic(ae).\nmagic_value(A):- last(A,as),head(A,as),magic(as).\nmagic_value(A):- head(A,fy),last(A,fy),magic(fy).", "is_solution": true, "conf_matrix": [0, 0, 0, 0], "total_exec_time": 17.569095667, "durations": [{"operation": "Test", "called": 12, "total": 2.8723149180000007, "mean": 0.23935957650000006, "maximum": 1.6121705000000013, "__type__": "DurationSummary"}, {"operation": "Find_Bindings_Prolog", "called": 11, "total": 2.737239085000004, "mean": 0.24883991681818218, "maximum": 1.6075979159999978, "__type__": "DurationSummary"}, {"operation": "Combine", "called": 11, "total": 0.5707607509999981, "mean": 0.05188734099999983, "maximum": 0.22569283400000018, "__type__": "DurationSummary"}, {"operation": "Constrain", "called": 11, "total": 0.00929366599999426, "mean": 0.0008448787272722055, "maximum": 0.001770916999999983, "__type__": "DurationSummary"}, {"operation": "Generate", "called": 12, "total": 0.0052737929999970845, "mean": 0.00043948274999975706, "maximum": 0.000534833999999762, "__type__": "DurationSummary"}], "__type__": "ProgramStats"}, "is_solution": true, "stats_file": "./results/list_example/magicpopper_types/9000/9/stats.json", "end": false, "__type__": "Stats"}