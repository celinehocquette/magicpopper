{"log_best_programs": true, "num_literals": 0, "total_programs": 12, "total_rules": 0, "total_ground_rules": 0, "durations": {"generate": [0.0005015830000001387, 0.00039499999999925706, 0.00045458299999978635, 0.00042220799999981296, 0.0005300830000010137, 0.00037208399999855146, 0.0003951250000007178, 0.00045887499999963666, 0.0004226660000021809, 0.000437000000001575, 0.0003910000000004743, 0.0005178329999999676], "test": [0.1323647500000007, 0.12065270799999972, 0.05583737500000119, 0.3474652910000007, 0.1172936660000019, 0.35228837500000054, 0.05606783300000018, 0.043706500000002535, 0.043909207999998756, 0.0848924999999987, 0.08487158300000175, 2.0018217919999977], "combine": [7.909999997224304e-07, 0.14026795799999903, 6.250000001983835e-07, 0.2365734590000006, 0.24096841700000127, 7.080000017367638e-07, 5.409999985772629e-07, 5.830000020523585e-07, 5.00000002290335e-07, 5.419999986600033e-07, 4.999999987376214e-07], "constrain": [0.0013279169999993456, 0.00141220899999972, 0.001698334000000301, 0.00020625000000151772, 0.0014568339999989632, 0.0002208330000001979, 0.0017972089999993557, 0.0003373329999973862, 0.0002525839999982793, 0.00025708399999757603, 0.000270207999999883], "find_bindings_prolog": [0.11974470799999892, 0.0552262920000004, 0.3466717500000005, 0.11643058399999973, 0.3514743749999987, 0.055520832999999215, 0.04312370899999962, 0.04332508399999924, 0.08434433300000066, 0.0842950000000009, 1.9971033749999982]}, "final_exec_time": 21.033726958, "stages": [], "best_programs": [], "solution": {"code": "magic_value(A):- head(A,bt),last(A,bt),magic(bt).\nmagic_value(A):- last(A,cx),head(A,cx),magic(cx).\nmagic_value(A):- last(A,gq),head(A,gq),magic(gq).\nmagic_value(A):- last(A,bj),head(A,bj),magic(bj).\nmagic_value(A):- last(A,dw),head(A,dw),magic(dw).\nmagic_value(A):- head(A,gn),last(A,gn),magic(gn).\nmagic_value(A):- last(A,cf),head(A,cf),magic(cf).\nmagic_value(A):- last(A,ai),head(A,ai),magic(ai).\nmagic_value(A):- head(A,gk),last(A,gk),magic(gk).\nmagic_value(A):- head(A,c7),magic(c7).\nmagic_value(A):- head(A,ah),last(A,ah),magic(ah).\nmagic_value(A):- last(A,ci),head(A,ci),magic(ci).\nmagic_value(A):- last(A,fx),head(A,fx),magic(fx).\nmagic_value(A):- head(A,ab),last(A,ab),magic(ab).\nmagic_value(A):- last(A,u),head(A,u),magic(u).\nmagic_value(A):- last(A,fz),head(A,fz),magic(fz).\nmagic_value(A):- last(A,r),head(A,r),magic(r).\nmagic_value(A):- head(A,ds),last(A,ds),magic(ds).\nmagic_value(A):- head(A,af),last(A,af),magic(af).\nmagic_value(A):- last(A,am),head(A,am),magic(am).\nmagic_value(A):- last(A,q),head(A,q),magic(q).\nmagic_value(A):- last(A,ce),head(A,ce),magic(ce).\nmagic_value(A):- last(A,bm),head(A,bm),magic(bm).\nmagic_value(A):- head(A,bb),last(A,bb),magic(bb).\nmagic_value(A):- last(A,dr),head(A,dr),magic(dr).\nmagic_value(A):- tail(A,B),head(B,c7),magic(c7).\nmagic_value(A):- head(A,br),last(A,br),magic(br).\nmagic_value(A):- last(A,gm),head(A,gm),magic(gm).\nmagic_value(A):- last(A,fc),head(A,fc),magic(fc).\nmagic_value(A):- last(A,cu),head(A,cu),magic(cu).\nmagic_value(A):- last(A,c7),magic(c7).\nmagic_value(A):- last(A,as),head(A,as),magic(as).\nmagic_value(A):- last(A,dx),head(A,dx),magic(dx).\nmagic_value(A):- last(A,dv),head(A,dv),magic(dv).\nmagic_value(A):- last(A,ex),head(A,ex),magic(ex).\nmagic_value(A):- last(A,eb),head(A,eb),magic(eb).\nmagic_value(A):- head(A,go),last(A,go),magic(go).", "is_solution": true, "conf_matrix": [0, 0, 0, 0], "total_exec_time": 21.03369875, "durations": [{"operation": "Test", "called": 12, "total": 3.4411715810000043, "mean": 0.286764298416667, "maximum": 2.0018217919999977, "__type__": "DurationSummary"}, {"operation": "Find_Bindings_Prolog", "called": 11, "total": 3.297260042999996, "mean": 0.2997509129999996, "maximum": 1.9971033749999982, "__type__": "DurationSummary"}, {"operation": "Combine", "called": 11, "total": 0.6178146240000029, "mean": 0.05616496581818208, "maximum": 0.24096841700000127, "__type__": "DurationSummary"}, {"operation": "Constrain", "called": 11, "total": 0.009236794999992526, "mean": 0.0008397086363629569, "maximum": 0.0017972089999993557, "__type__": "DurationSummary"}, {"operation": "Generate", "called": 12, "total": 0.0052980400000031125, "mean": 0.0004415033333335927, "maximum": 0.0005300830000010137, "__type__": "DurationSummary"}], "__type__": "ProgramStats"}, "is_solution": true, "stats_file": "./results/list_example/magicpopper_types/10000/7/stats.json", "end": false, "__type__": "Stats"}