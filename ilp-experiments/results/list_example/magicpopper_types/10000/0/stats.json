{"log_best_programs": true, "num_literals": 0, "total_programs": 12, "total_rules": 0, "total_ground_rules": 0, "durations": {"generate": [0.0004382920000001178, 0.0003641669999989716, 0.00045358300000053475, 0.00042129199999862976, 0.0005273749999989974, 0.0003651660000016932, 0.0003994160000004854, 0.0005088329999978214, 0.00039366599999723917, 0.00045070799999891165, 0.00036658299999814403, 0.0004363749999996003], "test": [0.12345058400000042, 0.11378858299999983, 0.05024929200000017, 0.31738758300000036, 0.10823941700000184, 0.31737370800000164, 0.04978129200000225, 0.03776524999999964, 0.037548250000000394, 0.0757137080000021, 0.0756178750000025, 1.6022645410000003], "combine": [6.670000001207654e-07, 0.13512162500000002, 5.000000005139782e-07, 0.22270941600000072, 0.22783812500000167, 7.49999998106432e-07, 5.409999985772629e-07, 6.250000019747404e-07, 5.410000021299766e-07, 4.5799999881523945e-07, 4.170000025283116e-07], "constrain": [0.001348957999999456, 0.0014056670000002214, 0.0016705409999993037, 0.00020525000000048976, 0.0014586669999978596, 0.00022000000000232944, 0.0017989579999984073, 0.0003142080000024805, 0.00026529100000161066, 0.00024091700000283822, 0.00023537499999903844], "find_bindings_prolog": [0.11301237500000028, 0.04969416700000018, 0.3166345830000008, 0.10741620799999829, 0.31651645799999883, 0.04923100000000247, 0.03718525000000028, 0.03698750000000217, 0.07516533400000114, 0.07510516700000025, 1.5982258329999972]}, "final_exec_time": 19.46183325, "stages": [], "best_programs": [], "solution": {"code": "magic_value(A):- head(A,fn),last(A,fn),magic(fn).\nmagic_value(A):- tail(A,B),head(B,c7),magic(c7).\nmagic_value(A):- last(A,ce),head(A,ce),magic(ce).\nmagic_value(A):- last(A,ab),head(A,ab),magic(ab).\nmagic_value(A):- last(A,fz),head(A,fz),magic(fz).\nmagic_value(A):- head(A,ax),last(A,ax),magic(ax).\nmagic_value(A):- last(A,eo),head(A,eo),magic(eo).\nmagic_value(A):- head(A,gf),last(A,gf),magic(gf).\nmagic_value(A):- head(A,as),last(A,as),magic(as).\nmagic_value(A):- last(A,da),head(A,da),magic(da).\nmagic_value(A):- last(A,ge),head(A,ge),magic(ge).\nmagic_value(A):- last(A,ga),head(A,ga),magic(ga).\nmagic_value(A):- last(A,c7),magic(c7).\nmagic_value(A):- head(A,h),last(A,h),magic(h).\nmagic_value(A):- head(A,ae),last(A,ae),magic(ae).\nmagic_value(A):- head(A,c7),magic(c7).\nmagic_value(A):- last(A,ca),head(A,ca),magic(ca).\nmagic_value(A):- last(A,ch),head(A,ch),magic(ch).\nmagic_value(A):- head(A,et),last(A,et),magic(et).\nmagic_value(A):- last(A,ed),head(A,ed),magic(ed).\nmagic_value(A):- head(A,bo),last(A,bo),magic(bo).\nmagic_value(A):- head(A,ep),last(A,ep),magic(ep).\nmagic_value(A):- last(A,bh),head(A,bh),magic(bh).\nmagic_value(A):- head(A,bn),last(A,bn),magic(bn).\nmagic_value(A):- head(A,ft),last(A,ft),magic(ft).\nmagic_value(A):- last(A,ds),head(A,ds),magic(ds).\nmagic_value(A):- last(A,ee),head(A,ee),magic(ee).\nmagic_value(A):- head(A,gl),last(A,gl),magic(gl).\nmagic_value(A):- head(A,at),last(A,at),magic(at).\nmagic_value(A):- head(A,cl),last(A,cl),magic(cl).\nmagic_value(A):- last(A,ex),head(A,ex),magic(ex).\nmagic_value(A):- head(A,l),last(A,l),magic(l).", "is_solution": true, "conf_matrix": [0, 0, 0, 0], "total_exec_time": 19.461802541, "durations": [{"operation": "Test", "called": 12, "total": 2.9091800830000114, "mean": 0.24243167358333428, "maximum": 1.6022645410000003, "__type__": "DurationSummary"}, {"operation": "Find_Bindings_Prolog", "called": 11, "total": 2.775173875000002, "mean": 0.2522885340909093, "maximum": 1.5982258329999972, "__type__": "DurationSummary"}, {"operation": "Combine", "called": 11, "total": 0.5856736650000052, "mean": 0.053243060454545924, "maximum": 0.22783812500000167, "__type__": "DurationSummary"}, {"operation": "Constrain", "called": 11, "total": 0.009163832000004035, "mean": 0.0008330756363640032, "maximum": 0.0017989579999984073, "__type__": "DurationSummary"}, {"operation": "Generate", "called": 12, "total": 0.005125455999991146, "mean": 0.00042712133333259555, "maximum": 0.0005273749999989974, "__type__": "DurationSummary"}], "__type__": "ProgramStats"}, "is_solution": true, "stats_file": "./results/list_example/magicpopper_types/10000/0/stats.json", "end": false, "__type__": "Stats"}