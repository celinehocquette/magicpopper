{"log_best_programs": true, "num_literals": 0, "total_programs": 1, "total_rules": 0, "total_ground_rules": 0, "durations": {"generate": [0.000534332999999998], "find_bindings_prolog": [0.015850625000000007], "bind": [0.01649974999999998], "test": [0.03288895799999997]}, "final_exec_time": 0.083115208, "stages": [], "best_programs": [], "solution": {"code": "f([14, 30, 86, 77, 29, 97, 91, 12, 12, 98, 31, 27, 12, 33, 56, 29, 22, 60, 69, 88, 56, 17, 21, 73, 57, 69, 53, 27, 28, 36],36):- magic([14, 30, 86, 77, 29, 97, 91, 12, 12, 98, 31, 27, 12, 33, 56, 29, 22, 60, 69, 88, 56, 17, 21, 73, 57, 69, 53, 27, 28, 36]),magic(36).\nf([19, 73, 27, 6, 75, 14, 44, 92, 75, 78, 89, 21, 55, 55, 68, 55, 58, 8, 19, 88, 6, 14, 35, 23, 11, 55, 71, 73, 10],55):- magic([19, 73, 27, 6, 75, 14, 44, 92, 75, 78, 89, 21, 55, 55, 68, 55, 58, 8, 19, 88, 6, 14, 35, 23, 11, 55, 71, 73, 10]),magic(55).\nf([22, 47, 53, 6, 52, 13, 2, 25, 24, 70, 17, 81, 44, 81, 92, 23, 13, 57, 85, 83, 13, 88, 93, 73, 68, 67, 85, 32, 29, 93, 12, 18, 85, 66, 61, 70, 91, 82],93):- magic([22, 47, 53, 6, 52, 13, 2, 25, 24, 70, 17, 81, 44, 81, 92, 23, 13, 57, 85, 83, 13, 88, 93, 73, 68, 67, 85, 32, 29, 93, 12, 18, 85, 66, 61, 70, 91, 82]),magic(93).\nf([23, 13, 29, 92, 67, 93, 97, 56],23):- magic(23),magic([23, 13, 29, 92, 67, 93, 97, 56]).\nf([27, 59, 65, 43, 9, 30, 60, 72, 29, 48, 13, 72, 48, 100, 40, 26, 48, 30, 45, 56, 98, 79, 48, 13, 71, 93, 43, 13, 12, 16, 54, 65, 2, 66, 33, 35, 58, 38, 73, 68, 20, 12, 8, 71, 100, 9, 26],54):- magic(54),magic([27, 59, 65, 43, 9, 30, 60, 72, 29, 48, 13, 72, 48, 100, 40, 26, 48, 30, 45, 56, 98, 79, 48, 13, 71, 93, 43, 13, 12, 16, 54, 65, 2, 66, 33, 35, 58, 38, 73, 68, 20, 12, 8, 71, 100, 9, 26]).\nf([33, 86, 68, 52, 83, 36, 15, 75, 17, 52, 86, 61, 91, 99, 69, 98, 21, 22, 98, 80, 2, 22, 94, 49, 37, 62, 58, 67, 6, 67, 66, 26, 42],91):- magic([33, 86, 68, 52, 83, 36, 15, 75, 17, 52, 86, 61, 91, 99, 69, 98, 21, 22, 98, 80, 2, 22, 94, 49, 37, 62, 58, 67, 6, 67, 66, 26, 42]),magic(91).\nf([55, 77, 56, 34, 28, 98, 84, 20, 19, 68, 45, 69, 86, 81],69):- magic([55, 77, 56, 34, 28, 98, 84, 20, 19, 68, 45, 69, 86, 81]),magic(69).\nf([60, 40, 38, 25, 98, 72, 60, 65, 16, 68, 79, 64, 14, 93, 50, 87, 66, 80, 28, 56, 78, 25, 15, 58, 57, 8, 16, 13, 57, 2, 2, 65, 17, 83, 40, 32, 19, 40, 14],65):- magic(65),magic([60, 40, 38, 25, 98, 72, 60, 65, 16, 68, 79, 64, 14, 93, 50, 87, 66, 80, 28, 56, 78, 25, 15, 58, 57, 8, 16, 13, 57, 2, 2, 65, 17, 83, 40, 32, 19, 40, 14]).\nf([89, 95, 69, 47, 3, 13, 45, 59, 81, 9, 91, 74, 49, 69, 71, 78, 34, 28, 98, 73, 25, 10, 4, 80, 69, 63, 1, 50, 39, 57, 67, 25, 19, 64, 70, 2, 63, 36, 100, 54, 35, 86, 39, 85, 73, 82, 23, 51],49):- magic(49),magic([89, 95, 69, 47, 3, 13, 45, 59, 81, 9, 91, 74, 49, 69, 71, 78, 34, 28, 98, 73, 25, 10, 4, 80, 69, 63, 1, 50, 39, 57, 67, 25, 19, 64, 70, 2, 63, 36, 100, 54, 35, 86, 39, 85, 73, 82, 23, 51]).\nf([91, 55, 62, 68, 97, 46, 8, 100, 27, 66, 85, 84, 15, 97, 10, 88, 60, 66, 49, 18, 63, 41, 98, 97, 84, 30, 13, 16, 40, 75, 74, 65, 59, 22, 68, 62, 101, 23, 90, 24, 35, 46, 90, 48, 30, 2, 97, 16, 66, 45, 11],91):- magic([91, 55, 62, 68, 97, 46, 8, 100, 27, 66, 85, 84, 15, 97, 10, 88, 60, 66, 49, 18, 63, 41, 98, 97, 84, 30, 13, 16, 40, 75, 74, 65, 59, 22, 68, 62, 101, 23, 90, 24, 35, 46, 90, 48, 30, 2, 97, 16, 66, 45, 11]),magic(91).", "is_solution": true, "conf_matrix": [10, 0, 10, 0], "total_exec_time": 0.08309120799999997, "durations": [{"operation": "Test", "called": 1, "total": 0.03288895799999997, "mean": 0.03288895799999997, "maximum": 0.03288895799999997, "__type__": "DurationSummary"}, {"operation": "Bind", "called": 1, "total": 0.01649974999999998, "mean": 0.01649974999999998, "maximum": 0.01649974999999998, "__type__": "DurationSummary"}, {"operation": "Find_Bindings_Prolog", "called": 1, "total": 0.015850625000000007, "mean": 0.015850625000000007, "maximum": 0.015850625000000007, "__type__": "DurationSummary"}, {"operation": "Generate", "called": 1, "total": 0.000534332999999998, "mean": 0.000534332999999998, "maximum": 0.000534332999999998, "__type__": "DurationSummary"}], "__type__": "ProgramStats"}, "is_solution": true, "stats_file": "./results/member/magicpopper/5/stats.json", "end": false, "__type__": "Stats"}