{"log_best_programs": true, "num_literals": 0, "total_programs": 8, "total_rules": 0, "total_ground_rules": 0, "durations": {"generate": [0.00037804199999991184, 0.0006556660000001102, 0.0011537499999998424, 0.0016784580000002158, 0.0016135420000000789, 0.0006512499999999921, 0.000752416000000089, 0.0016165829999996717, 0.0005997080000001986], "find_bindings_prolog": [0.02786516700000008, 0.032285125000000026, 0.1287564160000001, 0.14084074999999996, 0.1519732089999999, 0.14516824999999978], "test": [0.03287862500000016, 0.044362542000000005, 0.018749292000000084, 0.1290661249999998, 0.019946291999999977, 0.14118237500000008, 0.15257774999999985, 0.14552558299999996], "combine": [0.06172779100000003, 0.0051075000000000426, 5.00000000069889e-07, 6.670000001207654e-07, 6.669999998987208e-07, 5.419999999922709e-07, 5.00000000069889e-07, 5.419999999922709e-07], "constrain": [0.001877374999999848, 0.0023101249999999407, 0.0004238750000000735, 0.0030129999999999324, 0.001833374999999915, 0.0051150839999998254, 0.0019117920000000233, 0.0016493340000001133]}, "final_exec_time": 2.0565315419999997, "stages": [], "best_programs": [], "solution": {"code": "magic_value(A):- head(A,fc),magic(fc).\nmagic_value(A):- head(A,lu),magic(lu).\nmagic_value(A):- head(A,rz),magic(rz).\nmagic_value(A):- head(A,kq),magic(kq).\nmagic_value(A):- head(A,nm),magic(nm).\nmagic_value(A):- head(A,ka),magic(ka).\nmagic_value(A):- head(A,mv),magic(mv).\nmagic_value(A):- head(A,ro),magic(ro).\nmagic_value(A):- head(A,ht),magic(ht).\nmagic_value(A):- head(A,ko),magic(ko).\nmagic_value(A):- head(A,pr),magic(pr).\nmagic_value(A):- head(A,bk),magic(bk).\nmagic_value(A):- head(A,c),magic(c).\nmagic_value(A):- head(A,cf),magic(cf).\nmagic_value(A):- head(A,mb),magic(mb).\nmagic_value(A):- head(A,rg),magic(rg).\nmagic_value(A):- head(A,fd),magic(fd).\nmagic_value(A):- head(A,ia),magic(ia).\nmagic_value(A):- head(A,fu),magic(fu).\nmagic_value(A):- head(A,jl),magic(jl).\nmagic_value(A):- head(A,pe),magic(pe).\nmagic_value(A):- head(A,nn),magic(nn).\nmagic_value(A):- head(A,mw),magic(mw).\nmagic_value(A):- head(A,ot),magic(ot).\nmagic_value(A):- head(A,ch),magic(ch).\nmagic_value(A):- head(A,nz),magic(nz).\nmagic_value(A):- head(A,ca),magic(ca).\nmagic_value(A):- head(A,iq),magic(iq).\nmagic_value(A):- head(A,jk),magic(jk).\nmagic_value(A):- head(A,as),magic(as).\nmagic_value(A):- head(A,fs),magic(fs).\nmagic_value(A):- head(A,gw),magic(gw).\nmagic_value(A):- head(A,ky),magic(ky).\nmagic_value(A):- head(A,bd),magic(bd).\nmagic_value(A):- head(A,dz),magic(dz).\nmagic_value(A):- head(A,eo),magic(eo).\nmagic_value(A):- head(A,ao),magic(ao).\nmagic_value(A):- head(A,jo),magic(jo).\nmagic_value(A):- head(A,bc),magic(bc).\nmagic_value(A):- head(A,pp),magic(pp).\nmagic_value(A):- head(A,pf),magic(pf).\nmagic_value(A):- head(A,g),magic(g).\nmagic_value(A):- head(A,es),magic(es).\nmagic_value(A):- head(A,gz),magic(gz).\nmagic_value(A):- head(A,fa),magic(fa).\nmagic_value(A):- head(A,y),magic(y).\nmagic_value(A):- head(A,bv),magic(bv).\nmagic_value(A):- head(A,qi),magic(qi).\nmagic_value(A):- head(A,hm),magic(hm).\nmagic_value(A):- head(A,z),magic(z).\nmagic_value(A):- head(A,ma),magic(ma).\nmagic_value(A):- head(A,hv),magic(hv).\nmagic_value(A):- head(A,ps),magic(ps).\nmagic_value(A):- head(A,ny),magic(ny).\nmagic_value(A):- head(A,rh),magic(rh).", "is_solution": true, "conf_matrix": [200, 0, 200, 0], "total_exec_time": 2.0565285419999997, "durations": [{"operation": "Test", "called": 1, "total": 0.03287862500000016, "mean": 0.03287862500000016, "maximum": 0.03287862500000016, "__type__": "DurationSummary"}, {"operation": "Find_Bindings_Prolog", "called": 1, "total": 0.02786516700000008, "mean": 0.02786516700000008, "maximum": 0.02786516700000008, "__type__": "DurationSummary"}, {"operation": "Generate", "called": 1, "total": 0.00037804199999991184, "mean": 0.00037804199999991184, "maximum": 0.00037804199999991184, "__type__": "DurationSummary"}], "__type__": "ProgramStats"}, "is_solution": true, "stats_file": "./results/list_magicvalues_multipleclauses/magicpopper/55/3/stats.json", "end": true, "__type__": "Stats"}