{"log_best_programs": true, "num_literals": 0, "total_programs": 8, "total_rules": 0, "total_ground_rules": 0, "durations": {"generate": [0.00037683300000002085, 0.0005777909999999942, 0.0014949589999999624, 0.001529375000000055, 0.001940166000000021, 0.0006903329999998764, 0.000980458999999989, 0.0008900419999999798, 0.0008933339999996903], "find_bindings_prolog": [0.030583333000000046, 0.037809583000000035, 0.14014920799999997, 0.14777454200000006, 0.14843004199999976, 0.16435912499999983], "test": [0.035934833, 0.05090558399999989, 0.01945429200000004, 0.14047137499999995, 0.01962099999999989, 0.1481058329999998, 0.14876604100000002, 0.164860542], "combine": [0.062316124999999944, 0.005149207999999961, 5.00000000069889e-07, 7.07999999960407e-07, 6.249999999763389e-07, 5.00000000069889e-07, 5.410000003536197e-07, 5.419999999922709e-07], "constrain": [0.001803333000000018, 0.002314999999999845, 0.0004215000000000746, 0.0032251660000000015, 0.0018654999999998534, 0.005170624999999873, 0.0016698750000001539, 0.00539054200000022]}, "final_exec_time": 2.110556334, "stages": [], "best_programs": [], "solution": {"code": "magic_value(A):- head(A,cf),magic(cf).\nmagic_value(A):- head(A,ph),magic(ph).\nmagic_value(A):- head(A,be),magic(be).\nmagic_value(A):- head(A,hk),magic(hk).\nmagic_value(A):- head(A,ol),magic(ol).\nmagic_value(A):- head(A,dg),magic(dg).\nmagic_value(A):- head(A,fr),magic(fr).\nmagic_value(A):- head(A,gs),magic(gs).\nmagic_value(A):- head(A,kj),magic(kj).\nmagic_value(A):- head(A,sc),magic(sc).\nmagic_value(A):- head(A,hd),magic(hd).\nmagic_value(A):- head(A,lo),magic(lo).\nmagic_value(A):- head(A,dh),magic(dh).\nmagic_value(A):- head(A,fd),magic(fd).\nmagic_value(A):- head(A,z),magic(z).\nmagic_value(A):- head(A,ic),magic(ic).\nmagic_value(A):- head(A,rs),magic(rs).\nmagic_value(A):- head(A,jx),magic(jx).\nmagic_value(A):- head(A,gl),magic(gl).\nmagic_value(A):- head(A,no),magic(no).\nmagic_value(A):- head(A,gu),magic(gu).\nmagic_value(A):- head(A,ln),magic(ln).\nmagic_value(A):- head(A,ip),magic(ip).\nmagic_value(A):- head(A,cy),magic(cy).\nmagic_value(A):- head(A,pp),magic(pp).\nmagic_value(A):- head(A,lz),magic(lz).\nmagic_value(A):- head(A,et),magic(et).\nmagic_value(A):- head(A,ag),magic(ag).\nmagic_value(A):- head(A,cg),magic(cg).\nmagic_value(A):- head(A,bj),magic(bj).\nmagic_value(A):- head(A,gp),magic(gp).\nmagic_value(A):- head(A,au),magic(au).\nmagic_value(A):- head(A,lg),magic(lg).\nmagic_value(A):- head(A,if),magic(if).\nmagic_value(A):- head(A,ry),magic(ry).\nmagic_value(A):- head(A,fk),magic(fk).\nmagic_value(A):- head(A,gj),magic(gj).\nmagic_value(A):- head(A,lt),magic(lt).\nmagic_value(A):- head(A,ih),magic(ih).\nmagic_value(A):- head(A,ej),magic(ej).\nmagic_value(A):- head(A,kh),magic(kh).\nmagic_value(A):- head(A,i),magic(i).\nmagic_value(A):- head(A,pz),magic(pz).\nmagic_value(A):- head(A,iy),magic(iy).\nmagic_value(A):- head(A,f),magic(f).\nmagic_value(A):- head(A,b),magic(b).\nmagic_value(A):- head(A,bk),magic(bk).\nmagic_value(A):- head(A,id),magic(id).\nmagic_value(A):- head(A,jg),magic(jg).\nmagic_value(A):- head(A,ld),magic(ld).\nmagic_value(A):- head(A,gy),magic(gy).\nmagic_value(A):- head(A,oa),magic(oa).\nmagic_value(A):- head(A,go),magic(go).\nmagic_value(A):- head(A,cp),magic(cp).\nmagic_value(A):- head(A,bi),magic(bi).\nmagic_value(A):- head(A,aw),magic(aw).\nmagic_value(A):- head(A,fy),magic(fy).\nmagic_value(A):- head(A,rm),magic(rm).\nmagic_value(A):- head(A,cj),magic(cj).\nmagic_value(A):- head(A,da),magic(da).", "is_solution": true, "conf_matrix": [200, 0, 200, 0], "total_exec_time": 2.1105536249999997, "durations": [{"operation": "Test", "called": 1, "total": 0.035934833, "mean": 0.035934833, "maximum": 0.035934833, "__type__": "DurationSummary"}, {"operation": "Find_Bindings_Prolog", "called": 1, "total": 0.030583333000000046, "mean": 0.030583333000000046, "maximum": 0.030583333000000046, "__type__": "DurationSummary"}, {"operation": "Generate", "called": 1, "total": 0.00037683300000002085, "mean": 0.00037683300000002085, "maximum": 0.00037683300000002085, "__type__": "DurationSummary"}], "__type__": "ProgramStats"}, "is_solution": true, "stats_file": "./results/list_magicvalues_multipleclauses/magicpopper/60/2/stats.json", "end": true, "__type__": "Stats"}